# ~/.GH/Qompass/Go/Azimuth/discord/layout
# ---------------------------------------
# Copyright (C) 2025 Qompass AI, All rights reserved

// -----------------------------------------------------------------------------
// Azimuth — Discord + Email/SMS + rose LLM full‑stack chatbot skeleton (Go)
// Every file below is delimited with a header comment:   // file: <path>
// -----------------------------------------------------------------------------

// file: go.mod
module github.com/qompassai/azimuth

go 1.22

require (
    github.com/bwmarrin/discordgo v0.26.1
    github.com/google/uuid v1.3.0
    github.com/jackc/pgx/v5 v5.5.0
    github.com/nats-io/nats.go v1.26.0
    github.com/rs/zerolog v1.34.0
    github.com/spf13/viper v1.18.0
)

// -----------------------------------------------------------------------------
// file: cmd/bot/main.go
package main

import (
    "context"
    "encoding/json"
    "os"
    "os/signal"
    "syscall"

    "github.com/bwmarrin/discordgo"
    "github.com/qompassai/azimuth/internal/bus"
    "github.com/qompassai/azimuth/internal/config"
    "github.com/qompassai/azimuth/internal/model"
    "github.com/rs/zerolog/log"
)

func main() {
    cfg := config.MustLoad()

    dg, err := discordgo.New("Bot " + cfg.DiscordToken)
    if err != nil {
        log.Fatal().Err(err).Msg("create discord session")
    }
    dg.Identify.Intents = discordgo.IntentGuildMessages

    // Connect to NATS JetStream
    js := bus.MustJetStream(cfg)

    // Discord → NATS
    dg.AddHandler(func(s *discordgo.Session, m *discordgo.MessageCreate) {
        if m.Author.Bot {
            return
        }
        msg := model.NewDiscordMessage(m)
        if data, err := json.Marshal(msg); err == nil {
            js.PublishAsync("msg.in.discord", data)
        }
    })

    // NATS → Discord
    bus.MustSubscribe(js, "msg.out.discord", func(data []byte) {
        var r model.Response
        if err := json.Unmarshal(data, &r); err == nil {
            dg.ChannelMessageSend(r.ChannelID, r.Content)
        }
    })

    if err = dg.Open(); err != nil {
        log.Fatal().Err(err).Msg("discord open")
    }
    defer dg.Close()

    // graceful shutdown
    sig := make(chan os.Signal, 1)
    signal.Notify(sig, syscall.SIGINT, syscall.SIGTERM)
    <-sig
    dg.Close()
}

// -----------------------------------------------------------------------------
// file: cmd/emailgw/main.go
package main

// TODO: Implement IMAP/SMTP polling and NATS publishing
func main() {
    // skeleton placeholder
}

// -----------------------------------------------------------------------------
// file: cmd/smsgw/main.go
package main

// TODO: Implement Twilio/Vonage webhook → NATS bridge
func main() {}

// -----------------------------------------------------------------------------
// file: cmd/llmworker/main.go
package main

import (
    "encoding/json"
    "github.com/qompassai/azimuth/internal/bus"
    "github.com/qompassai/azimuth/internal/config"
    "github.com/qompassai/azimuth/internal/llm"
    "github.com/qompassai/azimuth/internal/model"
    "github.com/rs/zerolog/log"
)

func main() {
    cfg := config.MustLoad()
    js := bus.MustJetStream(cfg)
    client := llm.NewRoseClient(cfg)

    bus.MustSubscribe(js, "msg.in.*", func(data []byte) {
        var msg model.Message
        if err := json.Unmarshal(data, &msg); err != nil {
            log.Error().Err(err).Msg("json unmarshal")
            return
        }
        respText, err := client.Complete(msg.Content)
        if err != nil {
            log.Error().Err(err).Msg("rose complete")
            return
        }
        out := model.Response{MessageID: msg.ID, ChannelID: msg.ChannelID, Content: respText}
        if b, _ := json.Marshal(out); b != nil {
            js.PublishAsync("msg.out."+msg.Kind.String(), b)
        }
    })

    select {} // block forever
}

// -----------------------------------------------------------------------------
// file: internal/config/config.go
package config

import (
    "github.com/spf13/viper"
    "github.com/rs/zerolog/log"
)

type Config struct {
    DiscordToken string `mapstructure:"DISCORD_TOKEN"`
    NATSUrl      string `mapstructure:"NATS_URL"`
    RoseURL      string `mapstructure:"ROSE_URL"`
    TLSCert      string `mapstructure:"TLS_CERT"`
    TLSKey       string `mapstructure:"TLS_KEY"`
    TLSCA        string `mapstructure:"TLS_CA"`
}

func MustLoad() *Config {
    viper.AutomaticEnv()
    viper.SetDefault("NATS_URL", "nats://nats:4222")
    viper.SetDefault("ROSE_URL", "https://rose:11434")

    var c Config
    if err := viper.Unmarshal(&c); err != nil {
        log.Fatal().Err(err).Msg("load config")
    }
    if c.DiscordToken == "" {
        log.Fatal().Msg("DISCORD_TOKEN required")
    }
    return &c
}

// -----------------------------------------------------------------------------
// file: internal/model/message.go
package model

import (
    "time"

    "github.com/bwmarrin/discordgo"
    "github.com/google/uuid"
)

type Kind int

const (
    KindDiscord Kind = iota
    KindEmail
    KindSMS
)

func (k Kind) String() string {
    return [...]string{"discord", "email", "sms"}[k]
}

type Message struct {
    ID        uuid.UUID `json:"id"`
    Kind      Kind      `json:"kind"`
    ChannelID string    `json:"channel_id"`
    UserID    string    `json:"user_id"`
    Content   string    `json:"content"`
    CreatedAt time.Time `json:"created_at"`
}

type Response struct {
    MessageID uuid.UUID `json:"message_id"`
    ChannelID string    `json:"channel_id"`
    Content   string    `json:"content"`
}

func NewDiscordMessage(m *discordgo.MessageCreate) Message {
    return Message{
        ID:        uuid.New(),
        Kind:      KindDiscord,
        ChannelID: m.ChannelID,
        UserID:    m.Author.ID,
        Content:   m.Content,
        CreatedAt: m.Timestamp.Time,
    }
}

// -----------------------------------------------------------------------------
// file: internal/bus/bus.go
package bus

import (
    "github.com/nats-io/nats.go"
    "github.com/qompassai/azimuth/internal/config"
    "github.com/rs/zerolog/log"
)

type Handler func(data []byte)

func MustJetStream(cfg *config.Config) nats.JetStreamContext {
    nc, err := nats.Connect(cfg.NATSUrl, nats.Name("azimuth"))
    if err != nil {
        log.Fatal().Err(err).Msg("nats connect")
    }
    js, err := nc.JetStream()
    if err != nil {
        log.Fatal().Err(err).Msg("jetstream ctx")
    }
    return js
}

func MustSubscribe(js nats.JetStreamContext, subj string, fn Handler) {
    if _, err := js.Subscribe(subj, func(m *nats.Msg) { fn(m.Data) }); err != nil {
        log.Fatal().Err(err).Msg("subscribe")
    }
}

// -----------------------------------------------------------------------------
// file: internal/llm/rose.go
package llm

import (
    "bytes"
    "context"
    "encoding/json"
    "io"
    "net/http"
    "time"

    "github.com/qompassai/azimuth/internal/auth"
    "github.com/qompassai/azimuth/internal/config"
    "github.com/rs/zerolog/log"
)

type RoseClient struct {
    url string
    hc  *http.Client
}

type request struct {
    Model string `json:"model"`
    Prompt string `json:"prompt"`
    Stream bool   `json:"stream"`
}

type response struct {
    Answer string `json:"response"`
}

func NewRoseClient(cfg *config.Config) *RoseClient {
    tlsCfg := auth.MustTLS(cfg)
    return &RoseClient{
        url: cfg.RoseURL,
        hc: &http.Client{Timeout: 120 * time.Second, Transport: &http.Transport{TLSClientConfig: tlsCfg}},
    }
}

func (c *RoseClient) Complete(prompt string) (string, error) {
    body, _ := json.Marshal(request{Model: "rose", Prompt: prompt, Stream: false})
    req, _ := http.NewRequestWithContext(context.Background(), http.MethodPost, c.url+"/api/generate", bytes.NewReader(body))
    req.Header.Set("Content-Type", "application/json")
    res, err := c.hc.Do(req)
    if err != nil {
        return "", err
    }
    defer res.Body.Close()
    b, _ := io.ReadAll(res.Body)
    var r response
    if err = json.Unmarshal(b, &r); err != nil {
        return "", err
    }
    return r.Answer, nil
}

// -----------------------------------------------------------------------------
// file: internal/auth/tls.go
package auth

import (
    "crypto/tls"
    "crypto/x509"
    "os"

    "github.com/qompassai/azimuth/internal/config"
    "github.com/rs/zerolog/log"
)

func MustTLS(cfg *config.Config) *tls.Config {
    cert, err := tls.LoadX509KeyPair(cfg.TLSCert, cfg.TLSKey)
    if err != nil {
        log.Fatal().Err(err).Msg("load cert")
    }
    ca, err := os.ReadFile(cfg.TLSCA)
    if err != nil {
        log.Fatal().Err(err).Msg("read ca")
    }
    pool := x509.NewCertPool()
    pool.AppendCertsFromPEM(ca)

    return &tls.Config{
        Certificates:       []tls.Certificate{cert},
        RootCAs:            pool,
        MinVersion:         tls.VersionTLS13,
        CurvePreferences:   []tls.CurveID{tls.X25519}, // replace once Go supports Kyber hybrid
        InsecureSkipVerify: false,
    }
}

// -----------------------------------------------------------------------------
// file: internal/util/log.go
package util

import (
    "os"
    "time"

    "github.com/rs/zerolog"
)

func InitLogger() {
    zerolog.SetGlobalLevel(zerolog.InfoLevel)
    output := zerolog.ConsoleWriter{Out: os.Stderr, TimeFormat: time.RFC3339}
    zerolog.TimeFieldFormat = time.RFC3339
    zerolog.DefaultContextLogger = &zerolog.Logger{}
    zerolog.New(output).With().Timestamp()
}

// -----------------------------------------------------------------------------
// file: migrations/0001_init.sql
-- SQL migration: create tables for messages and users
CREATE TABLE IF NOT EXISTS users (
    id TEXT PRIMARY KEY,
    kind TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

CREATE TABLE IF NOT EXISTS messages (
    id UUID PRIMARY KEY,
    user_id TEXT REFERENCES users(id),
    kind TEXT NOT NULL,
    channel_id TEXT NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

// -----------------------------------------------------------------------------
// file: deploy/Dockerfile.bot
FROM --platform=linux/amd64 golang:1.22-alpine AS builder
WORKDIR /src
COPY . .
RUN apk add --no-cache bash git && \
    go build -trimpath -buildvcs=false -o /out/bot ./cmd/bot

FROM gcr.io/distroless/static:nonroot
COPY --from=builder /out/bot /bot
USER nonroot
ENTRYPOINT ["/bot"]

// -----------------------------------------------------------------------------
// file: deploy/compose.yaml
version: "3.9"
services:
  nats:
    image: nats:2.10-alpine@sha256:5ee380a0fbf0182c3af6ac02e4eca5a0ea5838b8fc08b2f2d3a8614e4d60b8c6
    command: ["-js"]
    user: 65532:65532
    networks: [quantum-net]
    volumes: ["nats_data:/data"]

  postgres:
    image: postgres:16-alpine@sha256:ed311e95ac7b319816c8e4ea58eacbb6ee83a687f097f938ec8b04c06cbe0395
    env_file: .env.postgres
    user: 70:70
    volumes: ["pg_data:/var/lib/postgresql/data"]
    networks: [quantum-net]

  rose:
    build: ../rose
    runtime: nvidia
    env_file: .env.rose
    volumes: ["models:/opt/rose/models"]
    networks: [quantum-net]

  bot:
    build:
      context: ..
      dockerfile: deploy/Dockerfile.bot
    env_file: .env.bot
    depends_on: [nats, postgres, rose]
    networks: [quantum-net]
    security_opt: ["no-new-privileges:true"]
    user: 1000:1000

volumes:
  nats_data: {}
  pg_data: {}
  models: {}

networks:
  quantum-net:
    external: true

// -----------------------------------------------------------------------------
// End of Azimuth skeleton

